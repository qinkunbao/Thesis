Title

Precise and Scalable Side-channel Analysis

Abstract

Side channels are ubiquitous in modern computer systems as sensitive
information can leak through many mechanisms such as power,
electromagnetic radiation, and even sound. Among them, address-based
side-channel attacks, such as cache-based attacks, memory page
attacks, and controlled-channel attacks, are especially problematic as
they do not require physical proximity. Hardware countermeasures,
which usually require changes to the complex underlying hardware, are
hard to adopt in practice.  On the contrary, software approaches are
generally easy to implement. While some existing tools can detect
side-channel leakages, many of these approaches are computationally
expensive or imprecise. Besides, many such vulnerabilities leak a
negligible amount of sensitive information, and thus developers are
often reluctant to address them. Existing tools do not provide
information to evaluate a leak’s severity, such as the number of
leaked bits. In this dissertation, I will present methods to detect
and quantify address-based side-channel vulnerabilities in real-world
applications.

First, the dissertation introduces a new method to detect
address-based side-channel vulnerabilities in the binary code. We
examine the bottleneck in the symbolic approaches and propose methods
to identify side-channel vulnerabilities in real-world cryptography
applications. We implement the approach in a tool and apply it to
popular cryptography libraries. The evaluation results confirm that
the tool is much faster than state-of-art tools while identifying all
the known leakages reported by previous tools. In addition, our tool
catches new vulnerabilities that are missed by previous tools.

Second, we propose a new program analysis method to precisely quantify
the leaked information in a single-trace attack. We model an
attacker’s observation of each leakage site as a constraint and run
Monte Carlo sampling to estimate the number of leaked bits for each
leakage site. Our results demonstrate that most reported
vulnerabilities are difficult to exploit in practice and should be
de-prioritized by developers. The evaluation results show that our
method can successfully distinguish severe leakages from many
negligible leakages.

Finally, we extend our approach to quantify side-channel leakages from
multiple trace attacks. We present Quincunx, a tool that can quantify
the lower bound of side-channel leakages. Unlike previous side-channel
detection tools, our approach can identify those severe side-channel
leakages without false positives. Moreover, our tools can estimate the
total effect of multiple leakage sites as well. We evaluate Quincunx
with OpenSSL, mbedTLS, TinyDNN, and GTK. Our evaluation results show
Quincunx is effective in identifying and quantifying side-channel
leakages.  ```
